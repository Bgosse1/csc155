Question 1:

When fork(2) is called and is successful it will return the PID of the child process is returned in the parent's thread
of execution, also a 0 is returned in the child's thread of execution.

When fork(2) is called and fails a -1 will be returned to the parent and no child process will be created, errno will be set appropriately.

________________________________________________________________________________________________________________________
Question 2:

The header file <errno.h> defines the symbol errno.  The values that errno can assume begin with the character E.

List of All values errno can assume:

E2BIG --> Argument list too long (POSIX.1)

EACCES --> Permission denied (POSIX.1)

EADDRINUSE --> Address already in use (POSIX.1)

EADDRNOTAVAIL --> Address not available (POSIX.1)

EAFNOSUPPORT --> Address family not supported (POSIX.1)

EAGAIN --> Resource temporarily unavailable (may be the same value as EWOULDBLOCK) (POSIX.1)

EALREADY --> Connection already in progress (POSIX.1)

EBADE --> Invalid exchange

EBADF --> Bad file descriptor (POSIX.1)

EBADFD --> File descriptor in bad state

EBADMSG --> Bad message (POSIX.1)

EBADR --> Invalid request descriptor

EBADRQC --> Invalid request code

EBADSLT --> Invalid slot

EBUSY --> Device or resource busy (POSIX.1)

ECANCELED --> Operation canceled (POSIX.1)

ECHILD --> No child processes (POSIX.1)

ECHRNG --> Channel number out of range

ECOMM --> Communication error on send

ECONNABORTED --> Connection aborted (POSIX.1)

ECONNREFUSED --> Connection refused (POSIX.1)

ECONNRESET --> Connection reset (POSIX.1)

EDEADLK --> Resource deadlock avoided (POSIX.1)

EDEADLOCK --> Synonym for EDEADLK

EDESTADDRREQ --> Destination address required (POSIX.1)

EDOM --> Mathematics argument out of domain of function (POSIX.1, C99)

EDQUOT --> Disk quota exceeded (POSIX.1)

EEXIST --> File exists (POSIX.1)

EFAULT --> Bad address (POSIX.1)

EFBIG --> File too large (POSIX.1)

EHOSTDOWN --> Host is down

EHOSTUNREACH --> Host is unreachable (POSIX.1)

EIDRM --> Identifier removed (POSIX.1)

EILSEQ --> Illegal byte sequence (POSIX.1, C99)

EINPROGRESS --> Operation in progress (POSIX.1)
 
EINTR --> Interrupted function call (POSIX.1); see signal(7).

EINVAL --> Invalid argument (POSIX.1)

EIO --> Input/output error (POSIX.1)

EISCONN --> Socket is connected (POSIX.1)

EISDIR --> Is a directory (POSIX.1)

EISNAM --> Is a named type file

EKEYEXPIRED --> Key has expired

EKEYREJECTED --> Key was rejected by service

EKEYREVOKED --> Key has been revoked

EL2HLT --> Level 2 halted

EL2NSYNC --> Level 2 not synchronized

EL3HLT --> Level 3 halted
 
EL3RST --> Level 3 halted

ELIBACC -->  Cannot access a needed shared library

ELIBBAD --> Accessing a corrupted shared library

ELIBMAX --> Attempting to link in too many shared libraries

ELIBSCN --> lib section in a.out corrupted

ELIBEXEC --> Cannot exec a shared library directly

ELOOP --> Too many levels of symbolic links (POSIX.1)

EMEDIUMTYPE --> Wrong medium type

EMFILE --> Too many open files (POSIX.1)

EMLINK --> Too many links (POSIX.1)
 
EMSGSIZE --> Message too long (POSIX.1)

EMULTIHOP -->  Multihop attempted (POSIX.1)

ENAMETOOLONG --> Filename too long (POSIX.1)

ENETDOWN --> Network is down (POSIX.1)

ENETRESET --> Connection aborted by network (POSIX.1)

ENETUNREACH --> Network unreachable (POSIX.1)

ENFILE --> Too many open files in system (POSIX.1)

ENOBUFS --> No buffer space available (POSIX.1 (XSI STREAMS option))

ENODATA --> No message is available on the STREAM head read queue (POSIX.1)

ENODEV --> No such device (POSIX.1)

ENOENT --> No such file or directory (POSIX.1)

ENOEXEC --> Exec format error (POSIX.1)

ENOKEY --> Required key not available

ENOLCK --> No locks available (POSIX.1)

ENOLINK --> Link has been severed (POSIX.1)

ENOMEDIUM --> No medium found

ENOMEM --> Not enough space (POSIX.1)

ENOMSG --> No message of the desired type (POSIX.1)

ENONET --> Machine is not on the network

ENOPKG --> Package not installed

ENOPROTOOPT --> Protocol not available (POSIX.1)

ENOSPC --> No space left on device (POSIX.1)

ENOSR --> No STREAM resources (POSIX.1 (XSI STREAMS option))

ENOSTR --> Not a STREAM (POSIX.1 (XSI STREAMS option))

ENOSYS --> Function not implemented (POSIX.1)

ENOTBLK --> Block device required

ENOTCONN --> The socket is not connected (POSIX.1)

ENOTDIR --> Not a directory (POSIX.1)

ENOTEMPTY --> Directory not empty (POSIX.1)

ENOTSOCK --> Not a socket (POSIX.1)

ENOTSUP --> Operation not supported (POSIX.1)

ENOTTY --> Inappropriate I/O control operation (POSIX.1)

ENOTUNIQ --> Name not unique on network

ENXIO --> No such device or address (POSIX.1)

EOPNOTSUPP --> Operation not supported on socket (POSIX.1)
(ENOTSUP and EOPNOTSUPP have the same value on Linux, but according to POSIX.1 these error values should be distinct.)

EOVERFLOW --> Value too large to be stored in data type (POSIX.1)

EPERM --> Operation not permitted (POSIX.1)

EPFNOSUPPORT --> Protocol family not supported

EPIPE --> Broken pipe (POSIX.1)

EPROTO --> Protocol error (POSIX.1)

EPROTONOSUPPORT --> Protocol not supported (POSIX.1)

EPROTOTYPE --> Protocol wrong type for socket (POSIX.1)

ERANGE --> Result too large (POSIX.1, C99)

EREMCHG --> Remote address changed

EREMOTE --> Object is remote

EREMOTEIO --> Remote I/O error

ERESTART --> Interrupted system call should be restarted

EROFS --> Read-only file system (POSIX.1)

ESHUTDOWN --> Cannot send after transport endpoint shutdown

ESPIPE --> Invalid seek (POSIX.1)

ESOCKTNOSUPPORT --> Socket type not supported

ESRCH --> No such process (POSIX.1)

ESTALE -->Stale file handle (POSIX.1)
This error can occur for NFS and for other file systems

ESTRPIPE --> Streams pipe error

ETIME --> Timer expired (POSIX.1 (XSI STREAMS option))
(POSIX.1 says "STREAM ioctl(2) timeout")

ETIMEDOUT --> Connection timed out (POSIX.1)

ETXTBSY --> Text file busy (POSIX.1)

EUCLEAN --> Structure needs cleaning

EUNATCH --> Protocol driver not attached

EUSERS --> Too many users

EWOULDBLOCK --> Operation would block (may be same value as EAGAIN) (POSIX.1)

EXDEV --> Improper link (POSIX.1)

EXFULL --> Exchange full 

_________________________________________________________________________________________________________________________
Question 3:

caddr_t --> core address 

clock_t --> counter of clock ticks (process time) 

comp_t --> compressed clock ticks 

dev_t --> device numbers (major and minor) 

fd_set --> file descriptor sets 

fpos_t --> file position 

gid_t --> numeric group IDs

ino_t --> i-node numbers 

mode_t --> file type, file creation mode 

nlink_t --> link counts for directory entries 

off_t --> file sizes and offsets (signed) 

pid_t --> process IDs and process group IDs (signed) 

ptrdiff_t --> result of subtracting two pointers (signed)

rlim_t --> resource limits 

sig_atomic_t --> data type that can be accessed atomically 

sigset_t --> signal set 

size_t --> sizes of objects (such as strings) (unsigned) 

ssize_t --> functions that return a count of bytes (signed) 

time_t --> counter of seconds of calendar time 

uid_t --> numeric user IDs

wchar_t --> can represent all distinct character codes
_________________________________________________________________________________________________________________________






